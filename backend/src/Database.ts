//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { DronesEntity } from './db/Drones.entity';
import { PlantDiseasesEntity } from './db/PlantDiseases.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [SettingsEntity, DronesEntity, PlantDiseasesEntity];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Drones: [
        {
          Speed: 1,
          MotionAndDirection: 'MotionAndDirection 1',
          Status: 'Status 1',
          id: 48,
        },
        {
          Speed: 2,
          MotionAndDirection: 'MotionAndDirection 2',
          Status: 'Status 2',
          id: 88,
        },
        {
          Speed: 3,
          MotionAndDirection: 'MotionAndDirection 3',
          Status: 'Status 3',
          id: 9,
        },
        {
          Speed: 4,
          MotionAndDirection: 'MotionAndDirection 4',
          Status: 'Status 4',
          id: 79,
        },
        {
          Speed: 5,
          MotionAndDirection: 'MotionAndDirection 5',
          Status: 'Status 5',
          id: 22,
        },
      ],
      PlantDiseases: [
        {
          Name: 'Name 1',
          Type: 'Type 1',
          Symptoms: 'Symptoms 1',
          ToxinType: 'ToxinType 1',
          Effect: 'Effect 1',
          id: 96,
        },
        {
          Name: 'Name 2',
          Type: 'Type 2',
          Symptoms: 'Symptoms 2',
          ToxinType: 'ToxinType 2',
          Effect: 'Effect 2',
          id: 87,
        },
        {
          Name: 'Name 3',
          Type: 'Type 3',
          Symptoms: 'Symptoms 3',
          ToxinType: 'ToxinType 3',
          Effect: 'Effect 3',
          id: 56,
        },
        {
          Name: 'Name 4',
          Type: 'Type 4',
          Symptoms: 'Symptoms 4',
          ToxinType: 'ToxinType 4',
          Effect: 'Effect 4',
          id: 20,
        },
        {
          Name: 'Name 5',
          Type: 'Type 5',
          Symptoms: 'Symptoms 5',
          ToxinType: 'ToxinType 5',
          Effect: 'Effect 5',
          id: 32,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('DronesEntity', data.Drones);
      await this.SeedResource('PlantDiseasesEntity', data.PlantDiseases);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
